# Original:  zinc-GRIT-2000.yaml
out_dir: results
metric_best: mae
metric_agg: argmin
tensorboard_each_run: False  # Log to Tensorboard each run
#accelerator: "cuda:3"
#device: "cuda:3"
accelerator: "cuda:0"
name_tag: ogbg-molhiv
run_multiple_splits: []
mlflow:
  use: False
  project: ogbg_molhiv
  name: ogbg_molhiv_unconditional
wandb:
  use: False
  project: ogbg_molhiv
dataset:
  format: OGB
  name: custom-ogbg-molhiv
  task: graph
  task_type: classification
  transductive: False
  node_encoder: True
  node_encoder_name: TypeDictNode
  node_encoder_num_types: 4
  node_encoder_bn: False
  edge_encoder: True
  edge_encoder_name: TypeDictEdge
  edge_encoder_num_types: 4
  edge_encoder_bn: False
  add_virtual_node_edge: False
  subgraph: False
  remove_h: True
  split_index: 0 # ogng-molhiv only has one split -- do we need to load it differently?? Probably, I'll deal with that after this.
  dataset_dir: ''
train:
  mode: ogbg_molhiv_unconditional
  batch_size: 512
  eval_batch_size: 2048
  eval_period: 100
  enable_ckpt: True  # Checkpointing can now be disabled to save I/O when e.g. just benchmarking.
  ckpt_best: True  # WARNING: Checkpoint every epoch a better model is found may increase I/O significantly.
  ckpt_clean: False # Delete old ckpt each time.
  ckpt_period: 50
  ensemble_repeat: 1
  ensemble_mode: none
  pretrain:
    mask_node_prob: 0.0
    mask_edge_prob: 0.0
    mask_label_prob: 0.0
    recon: all
    original_task: False
    input_target: False
    node_factor: 1.0
    edge_factor: 1.0
    graph_factor: 0.0
pretrained:
  dir:
model:
  type: gnn # HERE # GraphTransformerEncoder
  loss_fun: l1
  edge_decoding: dot
  graph_pooling: add
posenc_LapPE: # Added lines 65 - 70 to address missing attribute error
  enable: True
  eigen:
    laplacian_norm: none
    eigvec_norm: L2
    max_freqs: 1
posenc_RRWP:
  enable: True
  ksteps: 16
  spd: False # HERE -- added spd
prep:
  exp: # HERE
  dist_enable: # HERE
posenc_ERN: # HERE
  enable: 
posenc_ERE: # HERE
  enable:
encoder:
  model_type: AtomEncoder
  in_dim: 48
  prefix_dim: 96
  posenc_in_dim: 16
  posenc_in_dim_edge: 16
  posenc_dim: 48
  pe_raw_norm: None
  hid_dim: 96
  out_dim: 32
  use_time: False
  temb_dim: 0
  num_heads: 4
  num_layers: 5
  dropout: 0.2
  attn_dropout: 0.5
  attn:
    clamp: 5.
    act: 'relu'
    full_attn: True
    edge_enhance: True
    O_e: True
    norm_e: True
    fwl: False
    signed_sqrt: True
    score_act: True
    deg_scaler: False
    attn_product: mul
    attn_reweight: False
    edge_reweight: False
  mpnn:
    enable: True
    act: 'relu'
    dropout: 0.2
    edge_enhance: True
    project_edge: True
  residual: True
  layer_norm: False
  batch_norm: True
  act: 'relu'
  norm_e: True
  O_e: True
  ff_e: True
  update_e: True
  force_undirected: True
  pool: mean
  pool_edge: True
  pool_vn: False
  post_pool: False
  final_norm: True
  prefix_type: add_all
  label_embed_type: add_all
  num_task: 1
  task_type: classification
  num_classes: 2 # only for classification
  node_encoder: True
  node_encoder_name: TypeDictNode
  node_encoder_num_types: 4  # for remove_h
  node_encoder_bn: False
  edge_encoder: True
  edge_encoder_name: TypeDictEdge
  edge_encoder_num_types: 4
  edge_encoder_bn: False
  add_virtual_node_edge: False
dt:
  in_dim: 32  # should be the same as encoder.out_dim
  hid_dim: 256
  out_dim: 32
  use_time: True
  temb_dim: 128
  cond_dim: 16
  num_heads: 16
  num_layers: 8
  self_attn: True
  dropout: 0.05
  attn_dropout: 0.1
  residual: True
  layer_norm: False
  batch_norm: True
  act: 'relu'
  attn:
    clamp: 5.
    act: 'relu'
    full_attn: True
    edge_enhance: True
    O_e: True
    norm_e: True
    fwl: False
    signed_sqrt: True
    score_act: True
    deg_scaler: False
    attn_product: mul
    attn_reweight: False
    edge_reweight: False
  norm_e: True
  O_e: True
  ff_e: True
  ff_e_ca: True
  ff_e_sa: True
  update_e: True
  force_undirected: True
  pool: mean
  pool_edge: True
  pool_vn: False
  post_pool: False
  final_norm: True
  condition_list: ['unconditional']
diffusion:
  conditioning_key: crossattn
  hid_dim: 32  # should be the same as dt.in_dim
  parameterization: "x0"
  cond_stage_key: unconditional
  first_stage_config: results/QM9_unconditional_generation_encoder/5/ckpt/209.ckpt
  cond_stage_config: '__is_unconditional__'
  node_factor: 1.0
  edge_factor: 1.0
  graph_factor: 0.0
  recon_factor: 0.0
  task_factor: 0.0
  force_undirected: True
gt:
  layer_type: GritTransformer
  layers: 10
  n_heads: 8
  dim_hidden: 64  # `gt.dim_hidden` must match `gnn.dim_inner`
  dropout: 0.0
  layer_norm: False
  batch_norm: True
#  bn_momentum: 0.01
  update_e: True
  attn_dropout: 0.2
  attn:
    clamp: 5.
    act: 'relu'
    full_attn: True
    edge_enhance: True
    O_e: True
    norm_e: True
    fwl: False
gnn: # decoder --> san_graph = MLP + pooling
  head: san_graph
  layers_pre_mp: 0
  layers_post_mp: 3  # Not used when `gnn.head: san_graph`
  dim_inner: 64  # `gt.dim_hidden` must match `gnn.dim_inner`
  batchnorm: True
  act: relu
  dropout: 0.0
  agg: mean
  normalize_adj: False
optim:
  clip_grad_norm: True
  optimizer: adamW
  weight_decay: 1e-5
  base_lr: 1e-4
  max_epoch: 3000
  num_warmup_epochs: 50
  scheduler: cosine_with_warmup
  min_lr: 1e-6
